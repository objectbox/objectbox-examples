# Default image for linux builds
image: objectboxio/buildenv-android:2023-07-28

variables:
  # Disable the Gradle daemon for Continuous Integration servers as correctness
  # is usually a priority over speed in CI environments. Using a fresh
  # runtime for each build is more reliable since the runtime is completely
  # isolated from any previous builds.
  # Use low priority processes to avoid Gradle builds consuming all build machine resources.
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.priority=low"

stages:
  - test

build-and-test:
  stage: test
  tags: [ docker, x64 ]
  before_script:
    # Print Gradle and JVM version info
    - ./gradlew -version
  script:
    # https://docs.gitlab.com/ee/ci/jobs/#expand-and-collapse-job-log-sections
    - echo -e "\e[0Ksection_start:`date +%s`:section_clean\r\e[0KCleaning"
    # TODO Need signal if Android SDK download slows build (and Docker image needs to be updated),
    #  what Android Plugin task can we add here to install missing Android SDK components (e.g. new Build-Tools)?
    - ./gradlew clean
    - echo -e "\e[0Ksection_end:`date +%s`:section_clean\r\e[0K"

    - echo -e "\e[0Ksection_start:`date +%s`:section_build\r\e[0KBuilding"
    - ./gradlew build
    - echo -e "\e[0Ksection_end:`date +%s`:section_build\r\e[0K"
  artifacts:
    when: always
    paths:
      - "**/build/reports/lint-results-debug.html"
    reports:
      junit: "**/build/test-results/**/TEST-*.xml"

run-cli-app:
  stage: test
  tags: [ docker, x64 ]
  needs: ["build-and-test"]
  before_script:
    # "|| true" for an OK exit code if path not found
    - rm -r java-main/objectbox-notes-db || true
    - rm -r kotlin-main/objectbox-notes-db || true
  script:
    - ./gradlew java-main:run
    # Run again with existing database.
    - ./gradlew java-main:run
    - ./gradlew kotlin-main:run
    # Run again with existing database.
    - ./gradlew kotlin-main:run
